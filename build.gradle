def projectVersion = project.hasProperty('verifierProjectVersion') ? project.verifierProjectVersion : 'dev'
def isDevMode = projectVersion == 'dev'
def intellijStructureVersion = 'dev'
if (!isDevMode) {
  if (project.hasProperty('intellijStructureVersion')) {
    intellijStructureVersion = project.intellijStructureVersion
  } else {
    throw new MissingPropertyException("Version of intellij-structure library to be used is not specified via 'intellijStructureVersion'")
  }
}
project.ext.intellijStructureVersion = intellijStructureVersion

buildscript {

  ext.kotlin_version = '1.2.50'

  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

configure(allprojects) {
  apply plugin: 'java'
  apply plugin: 'kotlin'

  group = 'org.jetbrains.intellij.plugins'

  version = projectVersion

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
      jvmTarget = "1.8"
      freeCompilerArgs = ["-Xjvm-default=enable"]
    }
  }

  dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.github.salomonbrys.kotson:kotson:2.4.0'

    compile "org.jetbrains.intellij.plugins:structure-intellij:$intellijStructureVersion"

    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

    compile group: 'com.intellij', name: 'annotations', version: '12.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
  }

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://dl.bintray.com/jetbrains/intellij-plugin-service" }
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://jetbrains.bintray.com/intellij-third-party-dependencies" }
  }
}

configure(childProjects.values()) {

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts.archives sourcesJar

  jar {
    manifest {
      attributes 'Verifier-Version': version
    }
  }

}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


publishing {

  publications {

    def configurePublication = { MavenPublication pub, String projectName ->

      def proj = project(projectName)
      pub.groupId proj.group
      pub.artifactId proj.name
      pub.version proj.version

      pub.from proj.components.java
      proj.artifacts
      pub.artifact proj.sourcesJar
      if (proj.hasProperty("shadowJar")) {
        pub.artifact proj.shadowJar
      }
    }

    VerifierCliPublication(MavenPublication) { configurePublication(it, ':verifier-cli') }
    VerifierCorePublication(MavenPublication) { configurePublication(it, ':verifier-core') }
    RepositoryPublication(MavenPublication) { configurePublication(it, ':verifier-repository') }
  }
}

test.dependsOn project(':verifier-test').test
publishToMavenLocal.dependsOn test


bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')


  publish = true
  publications = ['VerifierCliPublication', 'VerifierCorePublication', 'RepositoryPublication']

  pkg {
    repo = 'intellij-plugin-service'
    name = 'intellij-plugin-verifier'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/JetBrains/intellij-plugin-verifier'
    userOrg = 'jetbrains'

    version {
      name = project.version
    }
  }
}

bintrayUpload.doFirst {

  if (!bintray.user || !bintray.key) {
    throw new StopExecutionException("You must specify (bintrayUser, bintrayApiKey) or (BINTRAY_USER, BINTRAY_API_KEY) properties")
  }

  println("Uploading Plugin Verifier module ${project.name}:${project.version}" + ' to bintray')
}

//run tests before deploying
//run tests before deploying
bintrayUpload.dependsOn test
